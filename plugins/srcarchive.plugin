# molior-deploy plugin
# vim: syntax=sh

preinit_deployment_srcarchive()
{
  do_software_installation=0
}

init_deployment_srcarchive()
{
  init_deployment_dir
}

postinst_internal_deployment_srcarchive()
{
  awk '/^deb/ {gsub("^deb","deb-src",$0); print}' $target/etc/apt/sources.list >$target/etc/apt/sources.list.d/sources-src.list
  log "updating APT database"
  chroot $target apt-get update >&2

  mkdir $WORK_DIR/srcarchive
  dpkg_initial_list=$WORK_DIR/srcarchive/dpkg-initial.list
  dpkg_exclude_list=$WORK_DIR/srcarchive/dpkg-exclude.list
  dpkg_final_list=$WORK_DIR/srcarchive/dpkg-final.list
  chroot $target dpkg --get-selections | awk '{print $1}' >$dpkg_initial_list
  dry_run=`chroot $target apt-get install --no-install-recommends -s $INSTALL_PACKAGE`
  exit_on_error "Error installing software"
  echo "$dry_run" | grep -w ^Inst | awk '{print $2}' >>$dpkg_initial_list
  sort $dpkg_initial_list >$dpkg_initial_list.tmp
  mv $dpkg_initial_list.tmp $dpkg_initial_list
  if [ ! -z "$EXCLUDE_FROM_SRCARCHIVE" ]; then
    log "excluding packages from source archive:" $EXCLUDE_FROM_SRCARCHIVE
    for package in $EXCLUDE_FROM_SRCARCHIVE; do
      echo $package >>$dpkg_exclude_list
    done
    sort $dpkg_exclude_list >$dpkg_exclude_list.tmp
    mv $dpkg_exclude_list.tmp $dpkg_exclude_list
    comm -23 $dpkg_initial_list $dpkg_exclude_list >$dpkg_final_list
  else
    cp $dpkg_initial_list $dpkg_final_list
  fi
  cp $dpkg_final_list $target/tmp/

  cat >$target/tmp/download-sources <<'EOF'
#!/bin/sh

mkdir /sources
for package in `cat /tmp/dpkg-final.list`; do
  cd /sources
  source_repo=`apt show $package | grep APT-Sources: | awk '{print $2}' | rev | cut -d'/' -f1,2 | rev`
  mkdir -p $source_repo
  cd $source_repo
  echo "downloading source package for: $package"
  n=0
  while [ "$n" -le 10 ]; do
    n=$(expr "$n" + 1)
    apt-get source -dq $package
    if [ "$?" -eq 0 ]; then
      break
    elif [ "$?" -ne 0 -a "$n" -eq 10 ]; then
      exit 1
    fi
  done
done
EOF
  chmod +x $target/tmp/download-sources
  log "downloading source packages"
  chroot $target /tmp/download-sources >&2
  exit_on_error "Error downloading sources"
}

finalize_deployment_srcarchive()
{
  deployment=`get_deployment_filename "tar"`
  tar cf $WORK_DIR/$deployment -C $target sources
  exit_on_error "Error compressing $deployment"
}
